<?xml version="1.0" encoding="utf-8"?>

<!--
    Reliability Warnings
    https://docs.microsoft.com/visualstudio/code-quality/reliability-warnings

    Reliability warnings support library and application reliability, such as correct memory and thread usage.
-->

<RuleSet Name="CA20XX" ToolsVersion="14.0">
    <Rules AnalyzerId="Microsoft.Analyzers.ManagedCodeAnalysis" RuleNamespace="Microsoft.Rules.Managed">

        <!--
            Dispose objects before losing scope

            Because an exceptional event might occur that will prevent the finalizer of an object from running, the
            object should be explicitly disposed before all references to it are out of scope.
        -->
        <Rule Id="CA2000" Action="None" />

        <!--
            Avoid calling problematic methods

            A member calls a potentially dangerous or problematic method.
        -->
        <Rule Id="CA2001" Action="None" />

        <!--
            Do not lock on objects with weak identity

            An object is said to have a weak identity when it can be directly accessed across application domain
            boundaries. A thread that tries to acquire a lock on an object that has a weak identity can be blocked by a
            second thread in a different application domain that has a lock on the same object.
        -->
        <Rule Id="CA2002" Action="None" />

        <!--
            Do not treat fibers as threads

            A managed thread is being treated as a Win32 thread.
        -->
        <Rule Id="CA2003" Action="None" />

        <!--
            Remove calls to GC.KeepAlive

            If you are converting to SafeHandle usage, remove all calls to GC.KeepAlive (object). In this case, classes
            should not have to call GC.KeepAlive, assuming they do not have a finalizer but rely on SafeHandle to
            finalize the OS handle for them.
        -->
        <Rule Id="CA2004" Action="None" />

        <!--
            Use SafeHandle to encapsulate native resources

            Use of IntPtr in managed code might indicate a potential security and reliability problem. All uses of
            IntPtr must be reviewed to determine whether use of a SafeHandle, or similar technology, is required in its
            place.
        -->
        <Rule Id="CA2006" Action="None" />

        <!--
            Do not directly await a Task

            An asynchronous method awaits a Task directly.
        -->
        <Rule Id="CA2007" Action="None" />

        <!--
            Do not call ToImmutableCollection on an ImmutableCollection value

            ToImmutable method was unnecessarily called on an immutable collection from System.Collections.Immutable
            namespace.
        -->
        <Rule Id="CA2009" Action="None" />

        <!--
            Do not assign property within its setter

            A property was accidentally assigned a value within its own set accessor.
        -->
        <Rule Id="CA2011" Action="None" />

        <!--
            Use ValueTasks correctly

            ValueTasks returned from member invocations are intended to be directly awaited. Attempts to consume a
            ValueTask multiple times or to directly access one's result before it's known to be completed may result in
            an exception or corruption. Ignoring such a ValueTask is likely an indication of a functional bug and may
            degrade performance.
        -->
        <Rule Id="CA2012" Action="None" />

        <!--
            Do not use ReferenceEquals with value types

            When comparing values using System.Object.ReferenceEquals, if objA and objB are value types, they are boxed
            before they are passed to the ReferenceEquals method. This means that even if both objA and objB represent
            the same instance of a value type, the ReferenceEquals method nevertheless returns false.
        -->
        <Rule Id="CA2013" Action="None" />

        <!--
            Do not use stackalloc in loops.

            Stack space allocated by a stackalloc is only released at the end of the current method's invocation. Using
            it in a loop can result in unbounded stack growth and eventual stack overflow conditions.
        -->
        <Rule Id="CA2014" Action="None" />

        <!--
            Do not define finalizers for types derived from MemoryManager<T>

            Adding a finalizer to a type derived from MemoryManager<T> may permit memory to be freed while it is still
            in use by a Span<T>.
        -->
        <Rule Id="CA2015" Action="None" />

    </Rules>
</RuleSet>