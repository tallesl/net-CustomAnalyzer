<?xml version="1.0" encoding="utf-8"?>

<!--
    Security Warnings
    https://docs.microsoft.com/visualstudio/code-quality/cryptography-warnings
    https://docs.microsoft.com/visualstudio/code-quality/security-warnings

    Security warnings support safer libraries and applications. These warnings help prevent security flaws in your
    program. If you disable any of these warnings, you should clearly mark the reason in code and also inform the
    designated security officer for your development project.
-->

<RuleSet Name="CA53XX" ToolsVersion="14.0">
    <Rules AnalyzerId="Microsoft.Analyzers.ManagedCodeAnalysis" RuleNamespace="Microsoft.Rules.Managed">

        <!--
            Do Not Use Weak Cryptographic Algorithms

            Weak encryption algorithms and hashing functions are used today for a number of reasons, but they should not
            be used to guarantee the confidentiality or integrity of the data they protect. This rule triggers when it
            finds TripleDES, SHA1, or RIPEMD160 algorithms in the code.
        -->
        <Rule Id="CA5350" Action="None" />

        <!--
            Do Not Use Broken Cryptographic Algorithms

            Broken cryptographic algorithms are not considered secure and their use should be strongly discouraged. This
            rule triggers when it finds the MD5 hash algorithm or either the DES or RC2 encryption algorithms in code.
        -->
        <Rule Id="CA5351" Action="None" />

        <!--
            Do not disable certificate validation

            A certificate can help authenticate the identity of the server. Clients should validate the server
            certificate to ensure requests are sent to the intended server. If the ServerCertificateValidationCallback
            always returns true, any certificate will pass validation.
        -->
        <Rule Id="CA5359" Action="None" />

        <!--
            Do not call dangerous methods in deserialization

            Insecure deserialization is a vulnerability which occurs when untrusted data is used to abuse the logic of
            an application, inflict a Denial-of-Service (DoS) attack, or even execute arbitrary code upon it being
            deserialized. It's frequently possible for malicious users to abuse these deserialization features when the
            application is deserializing untrusted data which is under their control. Specifically, invoke dangerous
            methods in the process of deserialization. Successful insecure deserialization attacks could allow an
            attacker to carry out attacks such as DoS attacks, authentication bypasses, and remote code execution.
        -->
        <Rule Id="CA5360" Action="None" />

        <!--
            Do not disable SChannel use of strong crypto

            Setting Switch.System.Net.DontEnableSchUseStrongCrypto to true weakens the cryptography used in outgoing
            Transport Layer Security (TLS) connections. Weaker cryptography can compromise the confidentiality of
            communication between your application and the server, making it easier for attackers to eavesdrop sensitive
            data.
        -->
        <Rule Id="CA5361" Action="None" />

        <!--
            Potential reference cycle in deserialized object graph

            If deserializing untrusted data, then any code processing the deserialized object graph needs to handle
            reference cycles without going into infinite loops. This includes both code that's part of a deserialization
            callback and code that processes the object graph after deserialization completed. Otherwise, an attacker
            could perform a Denial-of-Service attack with malicious data containing a reference cycle.
        -->
        <Rule Id="CA5362" Action="None" />

        <!--
            Do not disable request validation

            Request validation is a feature in ASP.NET that examines HTTP requests and determines whether they contain
            potentially dangerous content that can lead to injection attacks, including cross-site-scripting.
        -->
        <Rule Id="CA5363" Action="None" />

        <!--
            Do not use deprecated security protocols

            Transport Layer Security (TLS) secures communication between computers, most commonly with Hypertext
            Transfer Protocol Secure (HTTPS). Older protocol versions of TLS are less secure than TLS 1.2 and TLS 1.3
            and are more likely to have new vulnerabilities. Avoid older protocol versions to minimize risk.
        -->
        <Rule Id="CA5364" Action="None" />

        <!--
            Do Not Disable HTTP Header Checking

            HTTP header checking enables encoding of the carriage return and newline characters, \r and \n, that are
            found in response headers. This encoding can help to avoid injection attacks that exploit an application
            that echoes untrusted data contained by the header.
        -->
        <Rule Id="CA5365" Action="None" />

        <!--
            Use XmlReader For DataSet Read XML

            Using a DataSet to read XML with untrusted data may load dangerous external references, which should be
            restricted by using an XmlReader with a secure resolver or with DTD processing disabled.
        -->
        <Rule Id="CA5366" Action="None" />

        <!--
            Do Not Serialize Types With Pointer Fields

            This rule checks whether there’s a serializable class with a pointer field or property. Members that can’t
            be serialized can be a pointer, such as static members or fields marked with NonSerializedAttribute.
        -->
        <Rule Id="CA5367" Action="None" />

        <!--
            Set ViewStateUserKey For Classes Derived From Page

            Setting the ViewStateUserKey property can help you prevent attacks on your application by allowing you to
            assign an identifier to the view-state variable for individual users so that attackers cannot use the
            variable to generate an attack. Otherwise, there will be vulnerabilities to cross-site request forgery.
        -->
        <Rule Id="CA5368" Action="None" />

        <!--
            Use XmlReader for Deserialize

            Processing untrusted DTD and XML schemas may enable loading dangerous external references, which should be
            restricted by using an XmlReader with a secure resolver or with DTD and XML inline schema processing
            disabled.
        -->
        <Rule Id="CA5369" Action="None" />

        <!--
            Use XmlReader for validating reader

            Processing untrusted DTD and XML schemas may enable loading dangerous external references. This dangerous
            loading can be restricted by using an XmlReader with a secure resolver or with DTD and XML inline schema
            processing disabled.
        -->
        <Rule Id="CA5370" Action="None" />

        <!--
            Use XmlReader for schema read

            Processing untrusted DTD and XML schemas may enable loading dangerous external references. Using an
            XmlReader with a secure resolver or with DTD and XML inline schema processing disabled restricts this.
        -->
        <Rule Id="CA5371" Action="None" />

        <!--
            Use XmlReader for XPathDocument

            Processing XML from untrusted data may load dangerous external references, which can be restricted by using
            an XmlReader with a secure resolver or with DTD processing disabled.
        -->
        <Rule Id="CA5372" Action="None" />

        <!--
            Do not use obsolete key derivation function

            This rule detects the invocation of weak key derivation methods
            System.Security.Cryptography.PasswordDeriveBytes and Rfc2898DeriveBytes.CryptDeriveKey.
            System.Security.Cryptography.PasswordDeriveBytes used a weak algorithm PBKDF1.
        -->
        <Rule Id="CA5373" Action="None" />

        <!--
            Do Not Use XslTransform

            This rule checks if System.Xml.Xsl.XslTransform is instantiated in the code. System.Xml.Xsl.XslTransform is
            now obsolete and shouldn’t be used.
        -->
        <Rule Id="CA5374" Action="None" />

        <!--
            Do not use account shared access signature

            An account SAS can delegate access to read, write, and delete operations on blob containers, tables, queues,
            and file shares that are not permitted with a service SAS. However, it doesn't support container-level
            policies and has less flexibility and control over the permissions that are granted. Once malicious users
            get it, your storage account will be compromised easily.
        -->
        <Rule Id="CA5375" Action="None" />

        <!--
            Use SharedAccessProtocol HttpsOnly

            SAS is sensitive data that can't be transported in plain text on HTTP.
        -->
        <Rule Id="CA5376" Action="None" />

        <!--
            Use container level access policy

            A container-level access policy can be modified or revoked at any time. It provides greater flexibility and
            control over the permissions that are granted.
        -->
        <Rule Id="CA5377" Action="None" />

        <!--
            Do not disable ServicePointManagerSecurityProtocols

            Setting Switch.System.ServiceModel.DisableUsingServicePointManagerSecurityProtocols to true limits Windows
            Communication Framework's (WCF) Transport Layer Security (TLS) connections to using TLS 1.0. That version of
            TLS will be deprecated.
        -->
        <Rule Id="CA5378" Action="None" />

        <!--
            Do not use weak key derivation function algorithm

            The Rfc2898DeriveBytes class defaults to using the SHA1 algorithm. You should specify the hash algorithm to
            use in some overloads of the constructor with SHA256 or higher. Note, HashAlgorithm property only has a get
            accessor and doesn't have a overriden modifier.
        -->
        <Rule Id="CA5379" Action="None" />

        <!--
            Do not add certificates to root store

            This rule detects code that adds a certificate into the Trusted Root Certification Authorities certificate
            store. By default, the Trusted Root Certification Authorities certificate store is configured with a set of
            public CAs that has met the requirements of the Microsoft Root Certificate Program.
        -->
        <Rule Id="CA5380" Action="None" />

        <!--
            Ensure certificates are not added to root store

            This rule detects code that potentially adds a certificate into the Trusted Root Certification Authorities
            certificate store. By default, the Trusted Root Certification Authorities certificate store is configured
            with a set of public certification authorities (CAs) that has met the requirements of the Microsoft Root
            Certificate Program.
        -->
        <Rule Id="CA5381" Action="None" />

        <!--
            Use secure cookies in ASP.NET Core

            Applications available over HTTPS must use secure cookies, which indicate to the browser that the cookie
            should only be transmitted using Transport Layer Security (TLS).
        -->
        <Rule Id="CA5382" Action="None" />

        <!--
            Ensure use secure cookies in ASP.NET Core

            Applications available over HTTPS must use secure cookies, which indicate to the browser that the cookie
            should only be transmitted using Transport Layer Security (TLS).
        -->
        <Rule Id="CA5383" Action="None" />

        <!--
            Do not use digital signature algorithm (DSA)

            DSA is a weak asymmetric encryption algorithm.
        -->
        <Rule Id="CA5384" Action="None" />

        <!--
            Use Rivest–Shamir–Adleman (RSA) algorithm with sufficient key size

            An RSA key smaller than 2048 bits is more vulnerable to brute force attacks.
        -->
        <Rule Id="CA5385" Action="None" />

        <!--
            Avoid hardcoding SecurityProtocolType value

            Transport Layer Security (TLS) secures communication between computers, most commonly with Hypertext
            Transfer Protocol Secure (HTTPS). Protocol versions TLS 1.0 and TLS 1.1 are deprecated, while TLS 1.2 and
            TLS 1.3 are current. In the future, TLS 1.2 and TLS 1.3 may be deprecated. To ensure that your application
            remains secure, avoid hardcoding a protocol version and target at least .NET Framework v4.7.1.
        -->
        <Rule Id="CA5386" Action="None" />

        <!--
            Do not use weak key derivation function with insufficient iteration count

            This rule checks if a cryptographic key was generated by Rfc2898DeriveBytes with an iteration count of less
            than 100,000. A higher iteration count can help mitigate against dictionary attacks that try to guess the
            generated cryptographic key.
        -->
        <Rule Id="CA5387" Action="None" />

        <!--
            Ensure sufficient iteration count when using weak key derivation function

            This rule checks if a cryptographic key was generated by Rfc2898DeriveBytes with an iteration count that may
            be less than 100,000. A higher iteration count can help mitigate against dictionary attacks that try to
            guess the generated cryptographic key.
        -->
        <Rule Id="CA5388" Action="None" />

        <!--
            Do not add archive item's path to the target file system path

            File path can be relative and can lead to file system access outside of the expected file system target
            path, leading to malicious config changes and remote code execution via lay-and-wait technique.
        -->
        <Rule Id="CA5389" Action="None" />

        <!--
            Do not hard-code encryption key

            For a symmetric algorithm to be successful, the secret key must be known only to the sender and the
            receiver. When a key is hard-coded, it is easily discovered. Even with compiled binaries, it is easy for
            malicious users to extract it. Once the private key is compromised, the cipher text can be decrypted
            directly and is not protected anymore.
        -->
        <Rule Id="CA5390" Action="None" />

        <!--
            Use antiforgery tokens in ASP.NET Core MVC controllers

            Handling a POST, PUT, PATCH, or DELETE request without validating an antiforgery token may be vulnerable to
            cross-site request forgery attacks. A cross-site request forgery attack can send malicious requests from an
            authenticated user to your ASP.NET Core MVC controller.
        -->
        <Rule Id="CA5391" Action="None" />

        <!--
            Use DefaultDllImportSearchPaths attribute for P/Invokes

            By default, P/Invoke functions using DllImportAttribute probe a number of directories, including the current
            working directory for the library to load. This can be a security issue for certain applications, leading to
            DLL hijacking.
        -->
        <Rule Id="CA5392" Action="None" />

        <!--
            Do not use unsafe DllImportSearchPath value

            There could be a malicious DLL in the default DLL search directories and assembly directories. Or, depending
            on where your application is run from, there could be a malicious DLL in the application's directory.
        -->
        <Rule Id="CA5393" Action="None" />

        <!--
            Do not use insecure randomness

            Using a cryptographically weak pseudo-random number generator may allow an attacker to predict what
            security-sensitive value will be generated.
        -->
        <Rule Id="CA5394" Action="None" />

        <!--
            Miss HttpVerb attribute for action methods

            All the action methods that create, edit, delete, or otherwise modify data needs to be protected with the
            antiforgery attribute from cross-site request forgery attacks. Performing a GET operation should be a safe
            operation that has no side effects and doesn't modify your persisted data.
        -->
        <Rule Id="CA5395" Action="None" />

        <!--
            Set HttpOnly to true for HttpCookie

            As a defense in depth measure, ensure security sensitive HTTP cookies are marked as HttpOnly. This indicates
            web browsers should disallow scripts from accessing the cookies. Injected malicious scripts are a common way
            of stealing cookies.
        -->
        <Rule Id="CA5396" Action="None" />

        <!--
            Do not use deprecated SslProtocols values

            Transport Layer Security (TLS) secures communication between computers, most commonly with Hypertext
            Transfer Protocol Secure (HTTPS). Older protocol versions of TLS are less secure than TLS 1.2 and TLS 1.3
            and are more likely to have new vulnerabilities. Avoid older protocol versions to minimize risk.
        -->
        <Rule Id="CA5397" Action="None" />

        <!--
            Avoid hardcoded SslProtocols values

            Transport Layer Security (TLS) secures communication between computers, most commonly with Hypertext
            Transfer Protocol Secure (HTTPS). Protocol versions TLS 1.0 and TLS 1.1 are deprecated, while TLS 1.2 and
            TLS 1.3 are current. In the future, TLS 1.2 and TLS 1.3 may be deprecated. To ensure that your application
            remains secure, avoid hardcoding a protocol version.
        -->
        <Rule Id="CA5398" Action="None" />

        <!--
            Definitely disable HttpClient certificate revocation list check

            A revoked certificate isn't trusted anymore. It could be used by attackers passing some malicious data or
            stealing sensitive data in HTTPS communication.
        -->
        <Rule Id="CA5399" Action="None" />

    </Rules>
</RuleSet>