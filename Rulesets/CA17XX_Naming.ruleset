<?xml version="1.0" encoding="utf-8"?>

<!--
    Naming Warnings
    https://docs.microsoft.com/visualstudio/code-quality/naming-warnings

    Naming warnings support adherence to the naming conventions of the .NET Design Guidelines.
-->

<RuleSet Name="CA17XX" ToolsVersion="14.0">
    <Rules AnalyzerId="Microsoft.Analyzers.ManagedCodeAnalysis" RuleNamespace="Microsoft.Rules.Managed">

        <!--
            Do not name enum values 'Reserved'

            This rule assumes that an enumeration member that has a name that contains "reserved" is not currently used
            but is a placeholder to be renamed or removed in a future version. Renaming or removing a member is a
            breaking change.
        -->
        <Rule Id="CA1700" Action="None" />

        <!--
            Events should not have before or after prefix

            The name of an event starts with "Before" or "After". To name related events that are raised in a specific
            sequence, use the present or past tense to indicate the relative position in the sequence of actions.
        -->
        <Rule Id="CA1713" Action="None" />

        <!--
            Flags enums should have plural names

            A public enumeration has the System.FlagsAttribute attribute and its name does not end in "s". Types that
            are marked with FlagsAttribute have names that are plural because the attribute indicates that more than one
            value can be specified.
        -->
        <Rule Id="CA1714" Action="None" />

        <!--
            Identifiers should be spelled correctly

            The name of an externally visible identifier contains one or more words that are not recognized by the
            Microsoft spelling checker library.
        -->
        <Rule Id="CA1704" Action="None" />

        <!--
            Identifiers should differ by more than case

            Identifiers for namespaces, types, members, and parameters cannot differ only by case because languages that
            target the common language runtime are not required to be case-sensitive.
        -->
        <Rule Id="CA1708" Action="None" />

        <!--
            Identifiers should have correct prefix

            The name of an externally visible interface does not start with a capital "I". The name of a generic type
            parameter on an externally visible type or method does not start with a capital "T".
        -->
        <Rule Id="CA1715" Action="None" />

        <!--
            Identifiers should not contain type names

            The name of a parameter in an externally visible member contains a data type name, or the name of an
            externally visible member contains a language-specific data type name.
        -->
        <Rule Id="CA1720" Action="None" />

        <!--
            Identifiers should not have incorrect prefix

            By convention, only certain programming elements have names that begin with a specific prefix.
        -->
        <Rule Id="CA1722" Action="None" />

        <!--
            Identifiers should not have incorrect suffix

            By convention, only the names of types that extend certain base types or that implement certain interfaces,
            or types that are derived from these types, should end with specific reserved suffixes. Other type names
            should not use these reserved suffixes.
        -->
        <Rule Id="CA1711" Action="None" />

        <!--
            Only FlagsAttribute enums should have plural names

            Naming conventions dictate that a plural name for an enumeration indicates that more than one value of the
            enumeration can be specified at the same time.
        -->
        <Rule Id="CA1717" Action="None" />

        <!--
            Parameter names should match base declaration

            Consistent naming of parameters in an override hierarchy increases the usability of the method overrides. A
            parameter name in a derived method that differs from the name in the base declaration can cause confusion
            about whether the method is an override of the base method or a new overload of the method.
        -->
        <Rule Id="CA1725" Action="None" />

        <!--
            Parameter names should not match member names

            A parameter name should communicate the meaning of a parameter, and a member name should communicate the
            meaning of a member. It would be a rare design where these were the same. Naming a parameter the same as its
            member name is unintuitive and makes the library difficult to use.
        -->
        <Rule Id="CA1719" Action="None" />

        <!--
            Resource string compound words should be cased correctly

            Each word in the resource string is split into tokens that are based on the casing. Each contiguous
            two-token combination is checked by the Microsoft spelling checker library. If recognized, the word produces
            a violation of the rule.
        -->
        <Rule Id="CA1701" Action="None" />

        <!--
            Resource strings should be spelled correctly

            A resource string contains one or more words that are not recognized by the Microsoft spelling checker
            library.
        -->
        <Rule Id="CA1703" Action="None" />

        <!--
            Type Names Should Not Match Namespaces

            Type names should not match the names of .NET namespaces. Violation of this rule can reduce the usability of
            the library.
        -->
        <Rule Id="CA1724" Action="None" />

        <!--
            Identifiers should not contain underscores

            By convention, identifier names do not contain the underscore (_) character. This rule checks namespaces,
            types, members, and parameters.
        -->
        <Rule Id="CA1707" Action="None" />

        <!--
            Property names should not match get methods

            The name of a public or protected member starts with "Get" and otherwise matches the name of a public or
            protected property. "Get" methods and properties should have names that clearly distinguish their function.
        -->
        <Rule Id="CA1721" Action="None" />

        <!--
            Identifiers should not match keywords

            A namespace name or a type name matches a reserved keyword in a programming language. Identifiers for
            namespaces and types should not match keywords that are defined by languages that target the common language
            runtime.
        -->
        <Rule Id="CA1716" Action="None" />

        <!--
            Use preferred terms

            The name of an externally visible identifier includes a term for which an alternative, preferred term
            exists. Alternatively, the name includes the term "Flag" or "Flags".
        -->
        <Rule Id="CA1726" Action="None" />

        <!--
            Identifiers should be cased correctly

            By convention, parameter names use camel casing, and namespace, type, and member names use Pascal casing.
        -->
        <Rule Id="CA1709" Action="None" />

        <!--
            Compound words should be cased correctly

            The name of an identifier contains multiple words, and at least one of the words appears to be a compound
            word that is not cased correctly.
        -->
        <Rule Id="CA1702" Action="None" />

        <!--
            Do not prefix enum values with type name

            Names of enumeration members are not prefixed with the type name because type information is expected to be
            provided by development tools.
        -->
        <Rule Id="CA1712" Action="None" />

        <!--
            Identifiers should have correct suffix

            By convention, the names of types that extend certain base types or that implement certain interfaces, or
            types derived from these types, have a suffix that is associated with the base type or interface.
        -->
        <Rule Id="CA1710" Action="None" />

    </Rules>
</RuleSet>